function TestResult = gofTest_parallel_modified(fittedDist,distType,ControlVars)
% This works without Matlab's Parallel Computing Toolbox
% The only difference is that tempKSvalues etc accumulate differently.
% gofTest performs several goodness of fit tests on a fitted distribution.
%   gofTest performs a variety of GOF tests using Monte-Carlo simulation
%   for computing the pvalue.
%   Tests performed: Kolmogorov-Smirnov (KS)
%                    Anderson-Darling and variants (AD, AD2, ADup, AD2up)
%                    Cramer-von Mises (CVM)
%   These tests have been appropriately adjusted to take account of the 
%   truncated data sample. For details see Chernobai, Rachev & Fabozzi, 
%   'Composite Goodness-of-Fit Tests for Left-Truncated Loss Samples'.
%
%   SYNTAX:
%   TestResult = gofTest(fittedDist, distType, ControlVars)
%   
%
%   INPUTS:
%   fittedDist : a cell array obtained previously with fitTruncatedDistributions function
%                , with a
%		         probability distribution object in fittedDist{1} and warnings
%		         in fittedDist{2}.
%   distType   : 'truncated' or 'shifted' depending on fittedDist.
%   ControlVars: The control variables structure 
%
%   OUTPUTS:
%   TestResult : a structure with fields 
%       KS, AD, AD2, CVM, ADup,	AD2up, each with sub-fields - 
%
%           TestStatistic   : the values of the test statistics.
%           pvalue          : obtained using Monte-Carlo simulation; 
%                             comparing simulated runs to the TestStatistic.
%           Result          : 'Pass' or 'Fail'; pass if the pvalue exceeds 
%                             alpha (from ControlVars.GofTest.Alpha).
%
%       TestResult also has fields        
%       nSims      : number of simulations run.
%       alpha      : alpha from ControlVars.GofTest.Alpha.
%
%
%
%   Author:     Aon UK Limited.  Improved by Shuhei

nSims = ControlVars.GofTest.Sims;
alpha = ControlVars.GofTest.Alpha;

if strcmpi(distType,'truncated')
    lThres = ControlVars.lThreshold.Internal -  sqrt(eps); %; This adjustment is to prevent 
% TestResult.AD.TestStatistic = TestResult.AD2.TestStatistic = Inf,
% when there are observations equal to the threshold.;
elseif strcmpi(distType,'shifted')
    lThres = 0 -  sqrt(eps); 
else
    error('Aon:Severity:GofTest:DistTypeNotRecognized',...
          'The distribution type should be "truncated" or "shifted"')
end

% Test if fitted distribution has any important warnings
% If there are important warnings, set results and return - do not perform
% gof tests
warnings = fieldnames(fittedDist{2});
if sum(strcmpi(warnings,'IterLimit')) + ...
   sum(strcmpi(warnings,'EvalLimit')) + ...
   sum(strcmpi(warnings,'ZeroProbability')) > 0

    TestResult.KS.Result = 'Fail';  TestResult.AD.Result = 'Fail';
    TestResult.AD2.Result = 'Fail'; TestResult.CVM.Result = 'Fail';
    TestResult.ADup.Result = 'Fail';TestResult.AD2up.Result = 'Fail';
    
    TestResult.KS.pvalue = 0;   TestResult.AD.pvalue = 0;
    TestResult.AD2.pvalue = 0;  TestResult.CVM.pvalue = 0;
    TestResult.ADup.pvalue = 0; TestResult.AD2up.pvalue = 0;
    return
end


pd = fittedDist{1};

data = pd.InputData.data;

dist = pd.DistributionName;
if strcmpi(dist,'Log-Logistic')
    dist = 'Loglogistic';
% elseif strcmpi(dist,'Gamma')  %% so
%    dist = 'Loggamma';         %% so
end

% Load function handles for tests
% gofTestFns;

% Truncate probability distribution object (for random numbers etc)
try
    if ~strcmpi(pd.DistributionName,'gamma')
        pd = truncate(pd,lThres,Inf);
    else
        pd = truncate(pd,log(lThres),Inf);
    end
catch err
    disp('debugging')
end


% Calculate test statistics
nData = length(data);
j = (1:nData).';


data = sort(data);
% [zH,z] = getZValues(dist,pd.ParameterValues,lThres,data);
  z   = pd.cdf(data);
  zH  = pd.cdf(lThres);



% Compute TestResults using monte-carlo simulation and store

tempKSvalues = []; tempADvalues = []; tempAD2values = [];
tempCVMvalues = []; tempADupvalues = []; tempAD2upvalues = [];
      
       
KS_original  = @(n, zH, z, j)   max(sqrt(n)/(1 - zH) * max(zH + j/n * (1 - zH) - z), sqrt(n)/(1 - zH) * max(z - (zH + (j - 1)/n * (1 - zH))));
AD_original  = @(n, zH, z, j) max(sqrt(n) * ( max((zH + j/n * (1 - zH) - z)./sqrt((z - zH) .* (1 - z)))), sqrt(n) * (max((z - zH - (j - 1)/n * (1 - zH)) ./ sqrt((z - zH) .* (1 - z)))));
AD2_original = @(n, Zh, z, j)   -n+2*n*log(1-Zh) - 1/n.*sum((1+2*(n-j)).*log(1-z)) + 1/n.*sum((1-2*j).*log(z-Zh));
CVM_original = @(n, zH, z, j)   n/3 + n * zH/(1 - zH) + 1/(n * (1 - zH)) .* sum((1 - 2 * j) .* z) + 1/(1 - zH)^2 .* sum((z - zH).^2);
ADup_original = @(n, zH, z, j) sqrt(n) * max(max((zH + j/n .* (1 - zH) - z)./(1 - z)), max((z - zH - (j - 1)/n .* (1 - zH))./(1 - z)));
AD2up_original = @(n, zH, z, j) -2 * n * log(1 - zH) + 2 * sum(log(1 - z)) + (1 - zH)/n * sum((1 + 2 * (n - j))./(1 - z));

TestResult.KS.TestStatistic 	= 	KS_original(nData,zH,z,j);
TestResult.AD.TestStatistic 	= 	AD_original(nData,zH,z,j);
TestResult.AD2.TestStatistic 	= 	AD2_original(nData,zH,z,j);
TestResult.CVM.TestStatistic 	= 	CVM_original(nData,zH,z,j);
TestResult.ADup.TestStatistic 	= 	ADup_original(nData,zH,z,j);
TestResult.AD2up.TestStatistic	= 	AD2up_original(nData,zH,z,j);

dist_modified = dist;
if strcmpi(dist,'Lognormal Mixture')
    dist_modified = 'LgnormmixPSA';
end    

parfor i = 1:nSims %%%%% Main change 
    % clearvars pd_2;
    r = pd.random(nData,1);
    if  strcmpi(pd.DistributionName,'gamma')
        r = exp(r);
    end
    X = sort(r);
    
   
    if sum(~isfinite(X)) == 0 
        
        [pd_2,warnings] = fitTruncatedDistributions_modified(X,...
                                                    dist_modified,...
                                                    lThres,...
                                                    ControlVars,...
                                                    pd);
        
                                                
        if ~strcmpi(warnings,'IterLimit') && ~strcmpi(warnings,'EvalLimit')
            params_2 = pd_2.ParameterValues;
        else
            params_2 = nan(1,pd.NumParameters);
        end

    else
        params_2 = nan(1,pd.NumParameters);

    end
    
    
  %  [zH,z] = getZValues(dist,params_2,lThres,X);
    
      z   = pd_2.cdf(X);
      zH  = pd_2.cdf(lThres);
  
   
    if sum(isnan(params_2)) == 0
        
        tempKSvalues   = [tempKSvalues; KS_original(nData,zH,z,j)];
        tempADvalues   = [tempADvalues; AD_original(nData,zH,z,j)];
        tempAD2values  = [tempAD2values; AD2_original(nData,zH,z,j)];
        tempCVMvalues  = [tempCVMvalues; CVM_original(nData,zH,z,j)];
        tempADupvalues = [tempADupvalues; ADup_original(nData,zH,z,j)];
        tempAD2upvalues= [tempAD2upvalues; AD2up_original(nData,zH,z,j)];
       
      
    else
        
        tempKSvalues   = 	[tempKSvalues; Inf];
        tempADvalues   = 	[tempADvalues; Inf];
        tempAD2values  = 	[tempAD2values; Inf];
        tempCVMvalues  = 	[tempCVMvalues; Inf];
        tempADupvalues = 	[tempADupvalues; Inf];
        tempAD2upvalues= 	[tempAD2upvalues; Inf];
       
    end
    

end
   



% Calculate p-values
if ~all(tempKSvalues==Inf)          %% Changed by Shuhei
    
    TestResult.KS.pvalue =  sum(tempKSvalues(:,1) > ...
                                TestResult.KS.TestStatistic) / nSims;
    TestResult.AD.pvalue =  sum(tempADvalues(:,1) > ...
                                TestResult.AD.TestStatistic) / nSims;
    TestResult.AD2.pvalue = sum(tempAD2values(:,1) > ...
                                TestResult.AD2.TestStatistic) / nSims;
    TestResult.CVM.pvalue = sum(tempCVMvalues(:,1) > ...
                                TestResult.CVM.TestStatistic) / nSims;
    TestResult.ADup.pvalue = sum(tempADupvalues(:,1) > ...
                                TestResult.ADup.TestStatistic) / nSims;
    TestResult.AD2up.pvalue = sum(tempAD2upvalues(:,1) > ...
                                TestResult.AD2up.TestStatistic) / nSims;
else
    
    TestResult.KS.pvalue    =   NaN;
    TestResult.AD.pvalue    =   NaN;
    TestResult.AD2.pvalue   =   NaN;
    TestResult.CVM.pvalue   =   NaN;
    TestResult.ADup.pvalue  =   NaN;
    TestResult.AD2up.pvalue =   NaN;

end

% Store conclusion
if TestResult.KS.pvalue > alpha
    TestResult.KS.Result = 'Pass';
else
    TestResult.KS.Result = 'Fail';
end

if TestResult.AD.pvalue > alpha
    TestResult.AD.Result = 'Pass';
else
    TestResult.AD.Result = 'Fail';
end

if TestResult.AD2.pvalue > alpha
    TestResult.AD2.Result = 'Pass';
else
    TestResult.AD2.Result = 'Fail';
end

if TestResult.CVM.pvalue > alpha
    TestResult.CVM.Result = 'Pass';
else
    TestResult.CVM.Result = 'Fail';
end

if TestResult.ADup.pvalue > alpha
    TestResult.ADup.Result = 'Pass';
else
    TestResult.ADup.Result = 'Fail';
end

if TestResult.AD2up.pvalue > alpha
    TestResult.AD2up.Result = 'Pass';
else
    TestResult.AD2up.Result = 'Fail';
end

% Store number of simulations run
TestResult.nSims = nSims;

% Store alpha value
TestResult.alpha = alpha;

end


